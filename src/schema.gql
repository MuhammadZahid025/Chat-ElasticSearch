# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Comments {
  id: Float!
  text: String!
  userId: String
  postsId: Float
  createdAt: DateTime!
  updatedAt: DateTime!
  parentId: Float
  replyCount: Float
  user: Users!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Users {
  name: String!
  email: String!
  password: String!
  avatar: String
  createdAt: String!
  updatedAt: String!
  roles: Role
}

"""user's role"""
enum Role {
  User
  Admin
}

type Posts {
  id: Float!
  title: String!
  text: String!
  image: String
  tag: String
  minutesToRead: String
  userId: String
  createdAt: String!
  updatedAt: String!
  comments: [Comments!]!
  user: Users!
}

type CreatePostsResponsePayload {
  status: Float!
  message: String!
}

type AllPostsType {
  items: [Posts!]!
  total: Float!
}

type ResponseObject {
  message: String
  error: String
  status: Int
}

type PostPayload {
  response: ResponseObject
  post: Posts
}

type signInResponsePayload {
  status: Float!
  message: String!
}

type UserPayload {
  accesstoken: String!
  response: signInResponsePayload!
}

type Query {
  findAllPosts(paginationInput: PaginateInput!): AllPostsType!
  getPosts(search: String!): [Posts!]!
  myPosts(paginationInput: PaginateInput!): AllPostsType!
  findPostById(id: Float!): PostPayload!
  replies(commentId: Float!): [Comments!]!
  hello: String!
}

input PaginateInput {
  skip: Int!
  take: Int!
}

type Mutation {
  createPosts(createPostDto: CreatePostDto!): PostPayload!
  updatePost(id: Float!, updatePostDto: UpdatePostDto!): PostPayload!
  deletePost(id: Float!): PostPayload!
  createComment(createCommentDto: CreateCommentDto!): Comments!
  signUp(createUserInput: CreateUserInput!): Users!
  signIn(user: SignInUserInput!): UserPayload!
  updateUser(updateUser: UpdateUser!): Users!
}

input CreatePostDto {
  title: String!
  text: String!
  image: String!
  tag: String!
  minutesToRead: String!
}

input UpdatePostDto {
  text: String!
}

input CreateCommentDto {
  text: String!
  postId: Float!
  parentId: Float
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
  role: Role = User
}

input SignInUserInput {
  email: String!
  password: String!
}

input UpdateUser {
  avatar: String!
  name: String!
  password: String!
}